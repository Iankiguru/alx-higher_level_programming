def test_add_integer():
    # Test case 1: Adding two integers
    assert add_integer(5, 3) == 8

    # Test case 2: Adding two floats
    assert add_integer(2.5, 1.5) == 4

    # Test case 3: Adding positive with negative
    assert add_integer(2, -4) == -2

    # Test case 4: Adding negative with positive
    assert add_integer(-6, 8) == 2

    # Test case 5: Checking addition over multiple values
    expected = [0, 2, 6, 12, 20, 30]
    assert [add_integer(i, i ** 2) for i in range(6)] == expected

    # Test case 6: Checking float with int
    assert add_integer(2.1, 4) == 6

    # Test case 7: Checking int with float
    assert add_integer(5, 7.8) == 12

    # Test case 8: Checking both floats
    assert add_integer(2.45, 3.1) == 5

    # Test case 9: Checking for passed NaN
    try:
        add_integer(1, float('nan'))
    except ValueError as e:
        assert str(e) == "cannot convert float NaN to integer"

    # Test case 10: Checking for passed inf
    try:
        add_integer(1, float('inf'))
    except OverflowError as e:
        assert str(e) == "cannot convert float infinity to integer"

    # Test case 11: Checking super long int
    assert add_integer(999999999999999999999999999999, 1) == 1000000000000000000000000000000

    # Test case 12: Checking non-number with number
    try:
        add_integer([1], 2)
    except TypeError as e:
        assert str(e) == "a must be an integer"

    # Test case 13: Checking number with non-number
    try:
        add_integer(3, "2")
    except TypeError as e:
        assert str(e) == "b must be an integer"

    # Test case 14: Checking non-number with non-number
    try:
        add_integer((2,), {"key": "value"})
    except TypeError as e:
        assert str(e) == "a must be an integer"

    # Test case 15: Checking bool with number
    try:
        add_integer(True, 1)
    except TypeError as e:
        assert str(e) == "a must be an integer"

    # Test case 16: Checking number with bool
    try:
        add_integer(0, False)
    except TypeError as e:
        assert str(e) == "b must be an integer"

    # Test case 17: Checking no args
    try:
        add_integer()
    except TypeError as e:
        assert str(e) == "add_integer() missing 2 required positional arguments: 'a' and 'b'"

    # Test case 18: Checking one arg
    try:
        add_integer(1)
    except TypeError as e:
        assert str(e) == "add_integer() missing 1 required positional argument: 'b'"

    # Test case 19: Checking more than 2 args
    try:
        add_integer(1, 2, 3)
    except TypeError as e:
        assert str(e) == "add_integer()

